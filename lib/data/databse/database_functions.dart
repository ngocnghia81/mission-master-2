import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import 'package:mission_master/controllers/project_controller.dart';
import 'package:mission_master/data/Authentications/google_signin.dart';
import 'package:mission_master/notification/notification_services.dart';

class Database {
  final projectController = Get.put(ProjectController());
  NotificationServices noti = NotificationServices();
  Database() {
    print('sda');
  }
  static FirebaseFirestore firestore = FirebaseFirestore.instance;
  int _projectId = 0;
  int generateProjectNo() {
    _projectId = Random().nextInt(560000);
    return _projectId;
  }

  Future<bool> addWorkspace({
    required String projectName,
    required String projectDescription,
    required List<String> email,
    required String creationDate,
  }) async {
    int projectId = generateProjectNo();

    await firestore.collection('Project').doc(projectId.toString()).set({
      "projectId": projectId,
      "projectName": projectName,
      "projectDescription": projectDescription,
      "email": email,
      "projectCreatedBy": Auth.auth.currentUser!.email,
      "createdOn": creationDate,
    }, SetOptions(merge: true));

    return true;
  }

  Stream<QuerySnapshot> getCreatedProjects() {
    return firestore
        .collection('Project')
        .where('projectCreatedBy', isEqualTo: Auth.auth.currentUser!.email)
        .snapshots();
  }

  Future<bool> addTaskToProject({
    required String task,
    required String description,
    required String date,
    required String time,
    required List<String> members,
    String priority = 'normal',
    bool isRecurring = false,
    String recurringInterval = '',
  }) async {
    // Create task in the project collection
    await firestore
        .collection('Tasks')
        .doc(projectController.projectId.string)
        .set({'projectId': projectController.projectId.string});

    // Add task details
    await firestore
        .collection('Tasks')
        .doc(projectController.projectId.string)
        .collection('projectTasks')
        .doc()
        .set({
          'taskName': task,
          'description': description,
          'deadlineDate': date,
          'deadlineTime': time,
          'Members': members,
          'projectName': projectController.projectName.string,
          'status': 'Ch∆∞a b·∫Øt ƒë·∫ßu',
          'priority': priority,
          'isRecurring': isRecurring,
          'recurringInterval': recurringInterval,
        }, SetOptions(merge: true));
    
    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n ƒë∆∞·ª£c giao vi·ªác
    await noti.sendTaskAssignmentNotification(
      taskName: task,
      projectName: projectController.projectName.string,
      deadline: "$date $time",
      members: members,
    );

    return true;
  }

  Stream<QuerySnapshot> getAllProjects() {
    return firestore
        .collection('Project')
        .where(
          Filter.or(
            Filter("email", arrayContains: Auth.auth!.currentUser!.email),
            Filter(
              'projectCreatedBy',
              isEqualTo: Auth.auth!.currentUser!.email,
            ),
          ),
        )
        .snapshots();
  }

  Stream<QuerySnapshot> getTasksAsPerStatus({required String taskStatus}) {
    String currentUserEmail =
        FirebaseAuth.instance.currentUser!.email.toString();
    print(taskStatus);
    return firestore
        .collectionGroup('projectTasks')
        .where('Members', arrayContains: currentUserEmail)
        .where('status', isEqualTo: taskStatus)
        .snapshots();
  }

  Future<bool> updateTaskStatus({
    required String taskName,
    required String changeStatusTo,
    String? taskId,
    String? projectId,
  }) async {
    try {
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√¥ng
      final currentUserEmail = Auth.auth.currentUser?.email;
      if (currentUserEmail == null) {
        print("L·ªói: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
        return false;
      }
      
      QuerySnapshot snap;
      String? projectName;
      String? currentStatus;
      
      if (taskId != null && projectId != null) {
        print("=== B·∫ÆTƒê·∫¶U C·∫¨P NH·∫¨T TASK ===");
        print("Task ID: $taskId");
        print("Project ID: $projectId");
        print("Change Status To: $changeStatusTo");
        print("Current User: $currentUserEmail");
        
        // Ki·ªÉm tra xem taskId v√† projectId c√≥ gi·ªëng nhau kh√¥ng
        if (taskId == projectId) {
          print("L·ªói: Task ID v√† Project ID gi·ªëng nhau, c·ªë g·∫Øng t√¨m task theo t√™n");
          
          // Th·ª≠ t√¨m task trong t·∫•t c·∫£ c√°c project
          final projectsSnap = await firestore.collection('Tasks').get();
          
          for (var projectDoc in projectsSnap.docs) {
            final projectTasksSnap = await projectDoc.reference
                .collection('projectTasks')
                .where('taskName', isEqualTo: taskName)
                .where('Members', arrayContains: currentUserEmail)
                .get();
                
            if (projectTasksSnap.docs.isNotEmpty) {
              // T√¨m th·∫•y task, c·∫≠p nh·∫≠t tr·∫°ng th√°i
              final taskDoc = projectTasksSnap.docs.first;
              final taskData = taskDoc.data();
              currentStatus = taskData['status'] as String?;
              
                      // Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t - ch·ªâ ng∆∞·ªùi ƒë∆∞·ª£c giao m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t
        final List<String> members = List<String>.from(taskData['Members'] ?? []);
        if (!members.contains(currentUserEmail)) {
          print("L·ªói: Ng∆∞·ªùi d√πng $currentUserEmail kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t task n√†y");
          print("Danh s√°ch ƒë∆∞·ª£c giao: $members");
          print("Email hi·ªán t·∫°i: $currentUserEmail");
          return false;
        }
              
              await taskDoc.reference.update({
                'status': changeStatusTo,
                'lastUpdatedBy': currentUserEmail,
                'lastUpdatedAt': DateTime.now(),
              });
              
              print("ƒê√£ c·∫≠p nh·∫≠t task '${taskName}' trong project ${projectDoc.id}");
              return true;
            }
          }
          
          print("Kh√¥ng t√¨m th·∫•y task v·ªõi t√™n: $taskName");
          return false;
        }
        
        // Ki·ªÉm tra trong Regular Projects tr∆∞·ªõc
        DocumentReference taskDocRef = firestore
            .collection('Tasks')
            .doc(projectId)
            .collection('projectTasks')
            .doc(taskId);
            
        DocumentSnapshot taskDoc = await taskDocRef.get();
        
        // N·∫øu kh√¥ng t√¨m th·∫•y trong Regular Projects, th·ª≠ t√¨m trong Enterprise Tasks
        if (!taskDoc.exists) {
          print("Kh√¥ng t√¨m th·∫•y trong Regular Projects, ƒëang t√¨m trong Enterprise Tasks...");
          
          // T√¨m trong EnterpriseTasks collection
          final QuerySnapshot enterpriseTaskQuery = await firestore
              .collection('EnterpriseTasks')
              .where('id', isEqualTo: taskId)
              .where('projectId', isEqualTo: projectId)
              .limit(1)
              .get();
          
          if (enterpriseTaskQuery.docs.isNotEmpty) {
            taskDoc = enterpriseTaskQuery.docs.first;
            taskDocRef = taskDoc.reference;
            print("‚úÖ T√¨m th·∫•y task trong Enterprise Tasks");
          } else {
            print("L·ªói: Kh√¥ng t√¨m th·∫•y task v·ªõi ID: $taskId trong d·ª± √°n: $projectId (ƒë√£ t√¨m c·∫£ Regular v√† Enterprise)");
            return false;
          }
        } else {
          print("‚úÖ T√¨m th·∫•y task trong Regular Projects");
        }
            
        // L·∫•y th√¥ng tin d·ª± √°n v√† tr·∫°ng th√°i hi·ªán t·∫°i        
        // L·∫•y th√¥ng tin project (t√¨m trong c·∫£ Regular v√† Enterprise)
        DocumentSnapshot projectDoc = await firestore.collection('Project').doc(projectId).get();
        if (!projectDoc.exists) {
          projectDoc = await firestore.collection('EnterpriseProjects').doc(projectId).get();
        }
        if (projectDoc.exists) {
          final projectData = projectDoc.data() as Map<String, dynamic>;
          projectName = projectData['projectName'] ?? projectData['name'] as String?;
        }
        
        // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa task t·ª´ t√†i li·ªáu ƒë√£ ki·ªÉm tra
        final taskData = taskDoc.data() as Map<String, dynamic>;
        currentStatus = taskData['status'] as String?;
        print("üìÑ Task Data Keys: ${taskData.keys.toList()}");
        
        // Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t - ch·ªâ ng∆∞·ªùi ƒë∆∞·ª£c giao m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t
        // L·∫•y danh s√°ch th√†nh vi√™n t·ª´ c√°c field kh√°c nhau (Members ho·∫∑c assignedTo)
        List<String> members = [];
        if (taskData['Members'] != null) {
          members = List<String>.from(taskData['Members']);
        } else if (taskData['assignedTo'] != null) {
          members = List<String>.from(taskData['assignedTo']);
        } else if (taskData['members'] != null) {
          members = List<String>.from(taskData['members']);
        }
        
        if (!members.contains(currentUserEmail)) {
          print("L·ªói: Ng∆∞·ªùi d√πng $currentUserEmail kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t task n√†y");
          print("Danh s√°ch ƒë∆∞·ª£c giao: $members");
          print("Email hi·ªán t·∫°i: $currentUserEmail");
          print("Task data keys: ${taskData.keys.toList()}");
          return false;
        }
        
        // C·∫≠p nh·∫≠t task v·ªõi ID v√† project ID ƒë√£ bi·∫øt
        await taskDocRef.update({
              'status': changeStatusTo,
          'lastUpdatedBy': currentUserEmail,
              'lastUpdatedAt': DateTime.now(),
            });
            
        // L∆∞u l·ªãch s·ª≠ c·∫≠p nh·∫≠t
        if (currentStatus != null && currentStatus != changeStatusTo) {
          await taskDocRef
              .collection('statusUpdates')
              .add({
                'fromStatus': currentStatus,
                'toStatus': changeStatusTo,
                'updatedBy': Auth.auth.currentUser!.displayName ?? currentUserEmail,
                'timestamp': FieldValue.serverTimestamp(),
              });
        }
      } else {
        // Thay v√¨ d√πng collectionGroup, t√¨m task trong t·∫•t c·∫£ c√°c project
        print("T√¨m task v·ªõi t√™n: $taskName cho ng∆∞·ªùi d√πng: $currentUserEmail");
        
        // L·∫•y t·∫•t c·∫£ c√°c project
        final projectsSnap = await firestore.collection('Tasks').get();
        bool foundTask = false;
        
        // Duy·ªát qua t·ª´ng project ƒë·ªÉ t√¨m task
        for (var projectDoc in projectsSnap.docs) {
          final projectTasksSnap = await projectDoc.reference
              .collection('projectTasks')
            .where('taskName', isEqualTo: taskName)
              .where('Members', arrayContains: currentUserEmail)
            .get();
            
          if (projectTasksSnap.docs.isNotEmpty) {
            // T√¨m th·∫•y task, l·∫•y th√¥ng tin
            final taskDoc = projectTasksSnap.docs.first;
            final taskData = taskDoc.data();
        projectName = taskData['projectName'] as String?;
        currentStatus = taskData['status'] as String?;
        
            // Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t - ch·ªâ ng∆∞·ªùi ƒë∆∞·ª£c giao m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t
            final List<String> members = List<String>.from(taskData['Members'] ?? []);
            if (!members.contains(currentUserEmail)) {
              print("L·ªói: Ng∆∞·ªùi d√πng $currentUserEmail kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t task n√†y");
              print("Danh s√°ch ƒë∆∞·ª£c giao: $members");
              print("Email hi·ªán t·∫°i: $currentUserEmail");
              continue; // Ti·∫øp t·ª•c t√¨m task kh√°c n·∫øu c√≥
            }
            
            // C·∫≠p nh·∫≠t task
            await taskDoc.reference.update({
          'status': changeStatusTo,
              'lastUpdatedBy': currentUserEmail,
          'lastUpdatedAt': DateTime.now(),
        });
        
        // L∆∞u l·ªãch s·ª≠ c·∫≠p nh·∫≠t
            if (currentStatus != null && currentStatus != changeStatusTo) {
              await taskDoc.reference
              .collection('statusUpdates')
              .add({
                'fromStatus': currentStatus,
                'toStatus': changeStatusTo,
                    'updatedBy': Auth.auth.currentUser!.displayName ?? currentUserEmail,
                'timestamp': FieldValue.serverTimestamp(),
              });
        }
        
        // N·∫øu task ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh, ki·ªÉm tra xem c√≥ tr·ªÖ h·∫°n kh√¥ng
        if (changeStatusTo.toLowerCase() == 'completed') {
          final String deadlineDate = taskData['deadlineDate'] as String;
          
          try {
            // Chuy·ªÉn ƒë·ªïi deadline th√†nh DateTime
            final dateFormat = deadlineDate.split('/');
            if (dateFormat.length == 3) {
              final deadline = DateTime(
                int.parse(dateFormat[2]), 
                int.parse(dateFormat[1]), 
                int.parse(dateFormat[0])
              );
              
              // N·∫øu ƒë√£ qu√° h·∫°n, th√¥ng b√°o cho ng∆∞·ªùi d√πng
              if (DateTime.now().isAfter(deadline)) {
                // G·ª≠i th√¥ng b√°o ho√†n th√†nh tr·ªÖ
                noti.showLocalNotification(
                  title: 'C√¥ng vi·ªác ho√†n th√†nh tr·ªÖ h·∫°n',
                  body: 'C√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}" ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh sau h·∫°n ch√≥t',
                );
                
                // Th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c
                _notifyOtherMembers(
                  taskData: taskData,
                  title: 'C√¥ng vi·ªác ƒë√£ ho√†n th√†nh tr·ªÖ h·∫°n',
                  body: '${Auth.auth.currentUser!.displayName} ƒë√£ ho√†n th√†nh c√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}" (tr·ªÖ h·∫°n)',
                );
              } else {
                // G·ª≠i th√¥ng b√°o ho√†n th√†nh ƒë√∫ng h·∫°n
                noti.showLocalNotification(
                  title: 'C√¥ng vi·ªác ho√†n th√†nh',
                  body: 'C√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}" ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh ƒë√∫ng h·∫°n',
                );
                
                        // Th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c
        _notifyOtherMembers(
          taskData: taskData,
          title: 'C√¥ng vi·ªác ƒë√£ ho√†n th√†nh',
          body: '${Auth.auth.currentUser!.displayName} ƒë√£ ho√†n th√†nh c√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}"',
        );
              }
            }
          } catch (e) {
            print('L·ªói khi ki·ªÉm tra deadline: $e');
          }
        } else if (changeStatusTo.toLowerCase() == 'in progress') {
          // Th√¥ng b√°o task ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán
          noti.showLocalNotification(
            title: 'C√¥ng vi·ªác ƒëang th·ª±c hi·ªán',
            body: 'C√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}" ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu th·ª±c hi·ªán',
          );
          
          // Th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c
          _notifyOtherMembers(
            taskData: taskData,
            title: 'C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu',
            body: '${Auth.auth.currentUser!.displayName} ƒë√£ b·∫Øt ƒë·∫ßu th·ª±c hi·ªán c√¥ng vi·ªác "$taskName" trong d·ª± √°n "${projectName ?? ''}"',
          );
            }
            
            foundTask = true;
            break;
          }
        }
        
        if (!foundTask) {
          print("Kh√¥ng t√¨m th·∫•y task v·ªõi t√™n: $taskName ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t");
          return false;
        }
      }
      
      return true;
    } catch (e) {
      print('L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: $e');
      return false;
    }
  }
  
  // G·ª≠i th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c trong task
  void _notifyOtherMembers({
    required Map<String, dynamic> taskData,
    required String title,
    required String body,
  }) async {
    try {
      // L·∫•y danh s√°ch email c·ªßa c√°c th√†nh vi√™n t·ª´ c√°c field kh√°c nhau
      List<String> members = [];
      if (taskData['Members'] != null) {
        members = List<String>.from(taskData['Members']);
      } else if (taskData['assignedTo'] != null) {
        members = List<String>.from(taskData['assignedTo']);
      } else if (taskData['members'] != null) {
        members = List<String>.from(taskData['members']);
      }
      
      // L·ªçc ra c√°c th√†nh vi√™n kh√°c (kh√¥ng ph·∫£i ng∆∞·ªùi d√πng hi·ªán t·∫°i)
      final currentUserEmail = Auth.auth.currentUser?.email;
      final otherMembers = members.where((email) => email != currentUserEmail).toList();
      
      // L∆∞u th√¥ng b√°o cho t·ª´ng th√†nh vi√™n
      DateTime today = DateTime.now();
      String currentDate = "${today.day}/${today.month}/${today.year}";
      
      for (String member in otherMembers) {
        // L∆∞u th√¥ng b√°o v√†o Firestore
        await firestore.collection('Notifications').doc().set({
          'title': title,
          'body': body,
          'receiveDate': currentDate,
          'receiveTo': member,
          'isRead': false,
          'timestamp': FieldValue.serverTimestamp(),
        });
      }
    } catch (e) {
      print('L·ªói khi g·ª≠i th√¥ng b√°o: $e');
    }
  }

  Future<double?> getProgress({required String id}) async {
    try {
      print("ƒêang t√≠nh ti·∫øn ƒë·ªô cho d·ª± √°n: $id");
      
      // ƒê·∫£m b·∫£o id l√† m·ªôt chu·ªói
      String projectId = id.toString();
      
      // L·∫•y t·ªïng s·ªë task
      AggregateQuerySnapshot allDocs =
          await firestore
              .collection('Tasks')
              .doc(projectId)
              .collection('projectTasks')
              .count()
              .get();
              
      // L·∫•y s·ªë task ƒë√£ ho√†n th√†nh - ki·ªÉm tra t·∫•t c·∫£ c√°c tr·∫°ng th√°i c√≥ th·ªÉ
      List<String> completedStatuses = ['completed', 'Completed', 'ho√†n th√†nh', 'Ho√†n th√†nh', 'ho√†n t·∫•t', 'Ho√†n t·∫•t'];
      int totalCompleted = 0;
      
      // ƒê·∫øm t·ªïng s·ªë task ho√†n th√†nh v·ªõi t·∫•t c·∫£ c√°c tr·∫°ng th√°i c√≥ th·ªÉ
      for (String status in completedStatuses) {
        AggregateQuerySnapshot completedSnapshot =
            await firestore
                .collection('Tasks')
                .doc(projectId)
                .collection('projectTasks')
                .where('status', isEqualTo: status)
                .count()
                .get();
        
        totalCompleted += completedSnapshot.count!;
        print("S·ªë task ho√†n th√†nh v·ªõi tr·∫°ng th√°i '$status': ${completedSnapshot.count}");
      }
              
      print("T·ªïng s·ªë task: ${allDocs.count}");
      print("T·ªïng s·ªë task ho√†n th√†nh: $totalCompleted");
      
      if (allDocs.count == 0) return 0.0;
      double percentage = totalCompleted / allDocs.count!.toInt();
      print("T·ª∑ l·ªá ho√†n th√†nh: ${percentage * 100}%");
      return percentage;
    } catch (e) {
      print("L·ªói khi t√≠nh ti·∫øn ƒë·ªô: $e");
      return 0.0;
    }
  }

  Future<bool> removeMemberToProject({required String email}) async {
    await firestore
        .collection('Project')
        .doc(projectController.projectId.string)
        .update({
          'email': FieldValue.arrayRemove([email]),
        });

    return true;
  }

  Future<bool> addMemberToProject({required String email}) async {
    await firestore
        .collection('Project')
        .doc(projectController.projectId.string)
        .update({
          'email': FieldValue.arrayUnion([email]),
        });

    return true;
  }

  Stream<DocumentSnapshot> getMembersOfProject() {
    return firestore
        .collection('Project')
        .doc(projectController.projectId.string)
        .snapshots();
  }

  Stream<QuerySnapshot> getUserDetail() {
    return firestore
        .collection('User')
        .where('email', isEqualTo: projectController.projectCreatedBy.value)
        .snapshots();
  }

  Future<void> sendDeadlineReminder() async {
    try {
      DateTime today = DateTime.now();
      String formattedDate = "${today.day}/${today.month}/${today.year}";

      // First query to get tasks with today's deadline
      QuerySnapshot deadlineTasks = await firestore
          .collectionGroup('projectTasks')
          .where('Members', arrayContains: Auth.auth.currentUser!.email)
          .where('deadlineDate', isEqualTo: formattedDate)
          .get();

      // Then filter locally for tasks that are not completed
      List<DocumentSnapshot> incompleteTasks = deadlineTasks.docs
          .where((doc) => doc['status'].toString().toLowerCase() != 'completed')
          .toList();

      if (incompleteTasks.isNotEmpty) {
        print("length:${incompleteTasks.length}");
        for (int i = 0; i < incompleteTasks.length; i++) {
          DocumentSnapshot doc = incompleteTasks[i];
          print(doc['projectName']);
          noti.sendFCM(projectName: doc['projectName']);
        }
      }
    } catch (e) {
      print("Error sending deadline reminder: $e");
    }
  }

  Future<void> saveNotifications({
    required String title,
    required String body,
  }) async {
    try {
      final currentUserEmail = Auth.auth.currentUser?.email;
      if (currentUserEmail == null) {
        print('Kh√¥ng th·ªÉ l∆∞u th√¥ng b√°o: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
        return;
      }
      
      print('ƒêang l∆∞u th√¥ng b√°o cho: $currentUserEmail');
      print('Ti√™u ƒë·ªÅ: $title');
      print('N·ªôi dung: $body');
      
      DateTime today = DateTime.now();
      String notificationId = 'notif_${DateTime.now().millisecondsSinceEpoch}';
      
      await firestore.collection('Notifications').doc(notificationId).set({
        'title': title,
        'body': body,
        'receiveDate': "${today.day}/${today.month}/${today.year}",
        'receiveTo': currentUserEmail, 
        'isRead': false,
        'timestamp': FieldValue.serverTimestamp(),
      });
      
      print('ƒê√£ l∆∞u th√¥ng b√°o th√†nh c√¥ng v·ªõi ID: $notificationId');
    } catch (e) {
      print('L·ªói khi l∆∞u th√¥ng b√°o: $e');
    }
  }

  Future<bool> addComments({
    required String id,
    required String comment,
  }) async {
    FirebaseFirestore.instance.collection('Comments').doc(id).set({
      'taskId': id,
    });
    FirebaseFirestore.instance
        .collection('Comments')
        .doc(id)
        .collection('taskComments')
        .doc()
        .set({
          'comment': comment,
          'author': Auth.auth.currentUser!.displayName,
          'time': DateTime.now(),
        });

    return true;
  }

  Stream<QuerySnapshot> getComments({required String id}) {
    return FirebaseFirestore.instance
        .collection('Comments')
        .doc(id)
        .collection('taskComments')
        .orderBy('time', descending: true)
        .snapshots();
  }

  // Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ th√¥ng b√°o c≈© sang ƒë·ªãnh d·∫°ng m·ªõi
  Future<void> migrateNotifications() async {
    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      User? currentUser = Auth.auth.currentUser;
      if (currentUser == null) return;

      // L·∫•y danh s√°ch t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng theo uid
      QuerySnapshot notificationsSnapshot = await firestore
          .collection('Notifications')
          .where('receiveTo', isEqualTo: currentUser.uid)
          .get();

      // C·∫≠p nh·∫≠t t·ª´ng th√¥ng b√°o ƒë·ªÉ s·ª≠ d·ª•ng email thay v√¨ uid v√† th√™m isRead
      for (DocumentSnapshot doc in notificationsSnapshot.docs) {
        await doc.reference.update({
          'receiveTo': currentUser.email,
          'isRead': true, // ƒê√°nh d·∫•u c√°c th√¥ng b√°o c≈© l√† ƒë√£ ƒë·ªçc
        });
      }

      // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c th√¥ng b√°o thi·∫øu tr∆∞·ªùng isRead
      QuerySnapshot existingNotifications = await firestore
          .collection('Notifications')
          .where('receiveTo', isEqualTo: currentUser.email)
          .get();

      for (DocumentSnapshot doc in existingNotifications.docs) {
        Map<String, dynamic>? data = doc.data() as Map<String, dynamic>?;
        if (data != null && !data.containsKey('isRead')) {
          await doc.reference.update({
            'isRead': true, // ƒê√°nh d·∫•u c√°c th√¥ng b√°o c≈© thi·∫øu tr∆∞·ªùng isRead l√† ƒë√£ ƒë·ªçc
          });
        }
      }

      print("ƒê√£ chuy·ªÉn ƒë·ªïi ${notificationsSnapshot.docs.length} th√¥ng b√°o sang ƒë·ªãnh d·∫°ng m·ªõi");
    } catch (e) {
      print("L·ªói khi chuy·ªÉn ƒë·ªïi th√¥ng b√°o: $e");
    }
  }
}
