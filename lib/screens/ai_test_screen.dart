import 'package:flutter/material.dart';
import 'package:mission_master/services/sentiment_analysis_service.dart';
import 'package:mission_master/constants/colors.dart';

class AITestScreen extends StatefulWidget {
  const AITestScreen({Key? key}) : super(key: key);

  @override
  State<AITestScreen> createState() => _AITestScreenState();
}

class _AITestScreenState extends State<AITestScreen> {
  final TextEditingController _textController = TextEditingController();
  SentimentResult? _sentimentResult;
  TeamMoodAnalysis? _moodAnalysis;
  bool _isAnalyzing = false;

  // Test texts in Vietnamese
  final List<String> _testTexts = [
    // ‚úÖ Positive texts
    'Task ho√†n th√†nh r·∫•t t·ªët! Team l√†m vi·ªác tuy·ªát v·ªùi üòä',
    'C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ support. D·ª± √°n n√†y th√†nh c√¥ng nh·ªù s·ª± c·ªë g·∫Øng c·ªßa t·∫•t c·∫£ üëç',
    'UI design n√†y ƒë·∫πp qu√°! Perfect cho app c·ªßa ch√∫ng ta üéâ',
    'Code review xong r·ªìi, kh√¥ng c√≥ bug g√¨. Excellent work! ‚úÖ',
    'Demo th√†nh c√¥ng, kh√°ch h√†ng r·∫•t h√†i l√≤ng! üéä',
    'Release version m·ªõi smooth, team ƒë√£ l√†m tuy·ªát v·ªùi! üëè',
    'Sprint ho√†n th√†nh on time, all tasks done perfectly ‚≠ê',
    
    // ‚ùå Negative texts - Stress & Burnout  
    'Task n√†y kh√≥ qu√°, kh√¥ng bi·∫øt l√†m sao üò∞',
    'Deadline g·∫•p qu√°, team ƒëang stress v√† m·ªát l·∫Øm',
    'C√≥ nhi·ªÅu bug trong code, ph·∫£i fix l·∫°i t·ª´ ƒë·∫ßu üò¢',
    'Stress qu√°, deadline g·∫•p, team m·ªát l·∫Øm üò∞',
    'Burnout qu√° r·ªìi, overload work kh√¥ng th·ªÉ handle n·ªïi',
    'Server crash li√™n t·ª•c, kh√°ch h√†ng complain nhi·ªÅu üò≠',
    'Task delay, budget v∆∞·ª£t qu√° nhi·ªÅu, project th·∫•t b·∫°i',
    'Team members ngh·ªâ vi·ªác, thi·∫øu ng∆∞·ªùi l√†m, √°p l·ª±c l·∫Øm üòû',
    'Bug critical kh√¥ng fix ƒë∆∞·ª£c, deadline miss r·ªìi ‚ùå',
    'Overload qu√°, kh√¥ng k·ªãp l√†m h·∫øt task n√†y tu·∫ßn',
    'D·ª± √°n b·ªã delay, kh√°ch h√†ng kh√¥ng h√†i l√≤ng l·∫Øm',
    'M·ªát l·∫Øm r·ªìi, work t·ª´ s√°ng ƒë·∫øn t·ªëi v·∫´n kh√¥ng xong üò¥',
    
    // üòê Neutral texts
    'Meeting l√∫c 2h chi·ªÅu ƒë·ªÉ review ti·∫øn ƒë·ªô d·ª± √°n',
    'C·∫ßn update document cho API m·ªõi',
    'Task ƒëang in progress, d·ª± ki·∫øn ho√†n th√†nh tu·∫ßn t·ªõi',
    'Sprint planning cho tu·∫ßn t·ªõi, assign tasks cho team',
    'Review code pull request, merge v√†o main branch',
    'Update dependency packages, test compatibility',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ü§ñ AI Sentiment Analysis Test'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Input Section
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üìù Test Input',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.deepPurple,
                      ),
                    ),
                    const SizedBox(height: 16),
                    
                    TextField(
                      controller: _textController,
                      maxLines: 4,
                      decoration: InputDecoration(
                        hintText: 'Nh·∫≠p text ƒë·ªÉ ph√¢n t√≠ch sentiment...\nV√≠ d·ª•: "Task ho√†n th√†nh t·ªët, team l√†m vi·ªác tuy·ªát v·ªùi!" ho·∫∑c "Stress qu√°, deadline g·∫•p"',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        filled: true,
                        fillColor: Colors.grey[50],
                      ),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _analyzeText,
                            icon: Icon(Icons.psychology),
                            label: Text('Ph√¢n t√≠ch Sentiment'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.deepPurple,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton.icon(
                          onPressed: _testTeamMood,
                          icon: Icon(Icons.group),
                          label: Text('Test Team Mood'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 20),
            
            // Quick Test Buttons
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üöÄ Quick Tests',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(height: 12),
                    
                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: _testTexts.map((text) {
                        final sentiment = SentimentAnalysisService.analyzeSentiment(text);
                        return GestureDetector(
                          onTap: () {
                            _textController.text = text;
                            _analyzeText();
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            decoration: BoxDecoration(
                              color: _getSentimentColor(sentiment.label).withOpacity(0.1),
                              borderRadius: BorderRadius.circular(20),
                              border: Border.all(
                                color: _getSentimentColor(sentiment.label).withOpacity(0.3),
                              ),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(
                                  _getSentimentIcon(sentiment.label),
                                  size: 16,
                                  color: _getSentimentColor(sentiment.label),
                                ),
                                const SizedBox(width: 4),
                                Flexible(
                                  child: Text(
                                    text.length > 30 ? '${text.substring(0, 30)}...' : text,
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: _getSentimentColor(sentiment.label),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 20),
            
            // Results Section
            if (_sentimentResult != null) _buildSentimentResult(),
            if (_moodAnalysis != null) _buildMoodAnalysis(),
            
            const SizedBox(height: 20),
            
            // How it works
            _buildHowItWorks(),
          ],
        ),
      ),
    );
  }

  void _analyzeText() {
    if (_textController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Vui l√≤ng nh·∫≠p text ƒë·ªÉ ph√¢n t√≠ch')),
      );
      return;
    }

    setState(() {
      _isAnalyzing = true;
      _sentimentResult = null;
    });

    // Simulate loading delay
    Future.delayed(Duration(milliseconds: 500), () {
      final result = SentimentAnalysisService.analyzeSentiment(_textController.text);
      setState(() {
        _sentimentResult = result;
        _isAnalyzing = false;
      });
    });
  }

  void _testTeamMood() async {
    setState(() {
      _isAnalyzing = true;
      _moodAnalysis = null;
    });

    try {
      // Use a test project ID - in real app this would be actual project
      final analysis = await SentimentAnalysisService.analyzeTeamMood('test-project-id');
      setState(() {
        _moodAnalysis = analysis;
        _isAnalyzing = false;
      });
    } catch (e) {
      setState(() {
        _isAnalyzing = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói: $e')),
      );
    }
  }

  Widget _buildSentimentResult() {
    final result = _sentimentResult!;
    final color = _getSentimentColor(result.label);
    
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.analytics, color: color),
                const SizedBox(width: 8),
                Text(
                  'üìä K·∫øt qu·∫£ Sentiment Analysis',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Score visualization
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: color.withOpacity(0.3)),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      Icon(_getSentimentIcon(result.label), color: color, size: 32),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              _getSentimentLabel(result.label),
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: color,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              'Score: ${result.score.toStringAsFixed(2)} | Magnitude: ${result.magnitude.toStringAsFixed(2)}',
                              style: TextStyle(
                                color: Colors.grey[600],
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Progress bar
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Sentiment Score (-1.0 to 1.0)', style: TextStyle(fontSize: 12)),
                      const SizedBox(height: 4),
                      LinearProgressIndicator(
                        value: (result.score + 1) / 2, // Convert -1,1 to 0,1
                        backgroundColor: Colors.grey[300],
                        valueColor: AlwaysStoppedAnimation<Color>(color),
                      ),
                      const SizedBox(height: 8),
                      Text('Magnitude (0.0 to 1.0)', style: TextStyle(fontSize: 12)),
                      const SizedBox(height: 4),
                      LinearProgressIndicator(
                        value: result.magnitude,
                        backgroundColor: Colors.grey[300],
                        valueColor: AlwaysStoppedAnimation<Color>(color.withOpacity(0.7)),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 12),
            
            // Explanation
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.05),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° Gi·∫£i th√≠ch:',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _getExplanation(result),
                    style: TextStyle(fontSize: 12, color: Colors.grey[700]),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMoodAnalysis() {
    final analysis = _moodAnalysis!;
    
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üë• Team Mood Analysis',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.blue[800],
              ),
            ),
            const SizedBox(height: 16),
            
            Text('Overall Mood: ${analysis.moodLabel}'),
            Text('Member Count: ${analysis.memberCount}'),
            Text('Confidence: ${(analysis.confidence * 100).round()}%'),
            
            if (analysis.stressedMembers.isNotEmpty) ...[
              const SizedBox(height: 12),
              Text('‚ö†Ô∏è Stressed Members:', style: TextStyle(fontWeight: FontWeight.bold)),
              ...analysis.stressedMembers.map((member) => 
                Text('‚Ä¢ ${member.email} (${(member.stressLevel * 100).round()}% stress)')
              ),
            ],
            
            const SizedBox(height: 12),
            Text('üí° Recommendations:', style: TextStyle(fontWeight: FontWeight.bold)),
            ...analysis.recommendations.map((rec) => Text('‚Ä¢ $rec')),
          ],
        ),
      ),
    );
  }

  Widget _buildHowItWorks() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‚öôÔ∏è How It Works',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.green[800],
              ),
            ),
            const SizedBox(height: 12),
            
            _buildFeatureItem('üîç', 'Keyword Analysis', 'Ph√¢n t√≠ch t·ª´ kh√≥a t√≠ch c·ª±c/ti√™u c·ª±c trong ti·∫øng Vi·ªát v√† English'),
            _buildFeatureItem('üìä', 'Score Calculation', 'T√≠nh ƒëi·ªÉm sentiment t·ª´ -1.0 (r·∫•t ti√™u c·ª±c) ƒë·∫øn 1.0 (r·∫•t t√≠ch c·ª±c)'),
            _buildFeatureItem('üéØ', 'Magnitude Detection', 'ƒêo c∆∞·ªùng ƒë·ªô c·∫£m x√∫c (0.0 = nh·∫π, 1.0 = m·∫°nh)'),
            _buildFeatureItem('üòä', 'Emoji Support', 'H·ªó tr·ª£ ph√¢n t√≠ch emoji: üòä üëç üéâ üò∞ üò¢'),
            _buildFeatureItem('ü§ñ', 'Real-time Analysis', 'Ph√¢n t√≠ch ngay l·∫≠p t·ª©c kh√¥ng c·∫ßn g·ª≠i data l√™n server'),
          ],
        ),
      ),
    );
  }

  Widget _buildFeatureItem(String emoji, String title, String description) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(emoji, style: TextStyle(fontSize: 16)),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                ),
                Text(
                  description,
                  style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Color _getSentimentColor(String label) {
    switch (label) {
      case 'positive':
        return Colors.green;
      case 'negative':
        return Colors.red;
      default:
        return Colors.blue;
    }
  }

  IconData _getSentimentIcon(String label) {
    switch (label) {
      case 'positive':
        return Icons.sentiment_very_satisfied;
      case 'negative':
        return Icons.sentiment_very_dissatisfied;
      default:
        return Icons.sentiment_neutral;
    }
  }

  String _getSentimentLabel(String label) {
    switch (label) {
      case 'positive':
        return 'T√≠ch c·ª±c üòä';
      case 'negative':
        return 'Ti√™u c·ª±c üòï';
      default:
        return 'Trung t√≠nh üòê';
    }
  }

  String _getExplanation(SentimentResult result) {
    if (result.label == 'positive') {
      return 'Text n√†y ch·ª©a nhi·ªÅu t·ª´ kh√≥a t√≠ch c·ª±c nh∆∞ "t·ªët", "tuy·ªát", "ho√†n th√†nh", "c·∫£m ∆°n". AI ƒë√°nh gi√° ƒë√¢y l√† sentiment t√≠ch c·ª±c.';
    } else if (result.label == 'negative') {
      return 'Text n√†y ch·ª©a t·ª´ kh√≥a ti√™u c·ª±c nh∆∞ "kh√≥", "stress", "m·ªát", "bug", "delay". AI ph√°t hi·ªán sentiment ti√™u c·ª±c.';
    } else {
      return 'Text n√†y kh√¥ng c√≥ ƒë·ªß t·ª´ kh√≥a c·∫£m x√∫c m·∫°nh ho·∫∑c c√¢n b·∫±ng gi·ªØa t√≠ch c·ª±c/ti√™u c·ª±c. AI ƒë√°nh gi√° l√† trung t√≠nh.';
    }
  }
} 